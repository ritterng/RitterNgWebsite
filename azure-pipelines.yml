# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

variables:
- group: Todo

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    echo $(Login)
    touch .env 
    echo "ALLOWED_HOSTS=$(ALLOWED_HOSTS)" >> .env 
    echo "DATABASE_URL='$(DATABASE_URL)'" >> .env 
    echo "DB_DRIVER='$(DB_DRIVER)'" >> .env 
    echo "DB_ENGINE=$(DB_ENGINE)" >> .env 
    echo "DB_HOST=$(DB_HOST)" >> .env 
    echo "DB_NAME='$PWD/$(DB_NAME)'">> .env 
    echo "DB_PASSWORD='$(DB_PASSWORD)'" >> .env 
    echo "DB_PORT='$(DB_PORT)'" >> .env 
    echo "DB_USER='$(DB_USER)'" >> .env 
    echo "DEBUG=$(DEBUG)" >> .env 
    echo "ODBCSYSINI='$(ODBCSYSINI)'" >> .env 
    echo "SECRET_KEY='"$(Login)"'" >> .env 
    cat .env
  displayName: 'Create .env File'

- script: |
    python -m pip install --upgrade pip setuptools wheel
    sudo apt-get update
    sudo apt-get install libpq-dev python-dev
    sudo apt-get install sqlite3 libsqlite3-dev
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    python -m pip freeze
    ls -la
  displayName: 'Check Instaleed Package'

- script: |
    python checkdatabase.py
    echo ""
    cat todo/settings.py
  displayName: "Check Database"



- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
